@page "/table"

<PageTitle>Table</PageTitle>

<h1>検索画面</h1>

<Row Style="margin: 10px 0;">
    <Col Span="4">
    <Input Placeholder="社員名" @bind-Value="@Employeename" />
    </Col>
    <Col Span="4">
    <Select DataSource="@persons"
            @bind-Value="@departmentname"
            LabelName="@nameof(Person.Name)"
            ValueName="@nameof(Person.Value)"
            Placeholder="部署コード"
            EnableSearch>
    </Select>
    </Col>
    <Col Span="4">
    <GridRow>
        <GridCol Span="6" Pull="18">
        </GridCol>
        <GridCol Span="18" Push="6">
            <Button Type="primary" Ghost>
                検索
            </Button>
        </GridCol>
    </GridRow>
    </Col>
</Row>

@using System.ComponentModel
@using AntDesign.TableModels

<Table @ref="table"
       TItem="WeatherForecast"
       DataSource="@forecasts"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
  <Selection Key="@(context.Id.ToString())" />
  <PropertyColumn Property="c=>c.Id" Sortable />
  <PropertyColumn Property="c=>c.Date" Format="yyyy-MM-dd" Sortable />
  <PropertyColumn Property="c=>c.TemperatureC" Sortable />
  <PropertyColumn Title="Temp. (F)" Property="c=>c.TemperatureF" />
  <PropertyColumn Title="Hot" Property="c=>c.Hot">
    <Switch @bind-Value="@context.Hot"></Switch>
  </PropertyColumn>
  <PropertyColumn Property="c=>c.Summary" Sortable />
  <ActionColumn>
    <Space>
      <SpaceItem><Button Danger OnClick="()=>Delete(context.Id)">Delete</Button></SpaceItem>
    </Space>
  </ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

<br />
<h5>selections:</h5>
@if (selectedRows != null && selectedRows.Any())
{
    <Button Danger Size="small" OnClick="@(e => { selectedRows = null; })">Clear</Button>

    @foreach (var selected in selectedRows)
    {
        <Tag @key="selected.Id" Closable OnClose="e=>RemoveSelection(selected.Id)">@selected.Id - @selected.Summary</Tag>
    }
}

<Button OnClick="()=> { _pageIndex--; }">Previous page</Button>
<Button OnClick="()=> { _pageIndex++; }">Next Page</Button>

@using System.Text.Json;
@code {

    WeatherForecast[] forecasts;

    IEnumerable<WeatherForecast> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await GetForecastAsync(1, 50);
        _total = 50;
    }

    public class WeatherForecast
    {
        [DisplayName("社員番号")]
        public int Id { get; set; }

        [DisplayName("入社日")]
        public DateTime? Date { get; set; }

        [DisplayName("携帯番号")]
        public int TemperatureC { get; set; }

        [DisplayName("氏名")]
        public string Summary { get; set; }

        [DisplayName("内線番号")]
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        [DisplayName("性別")]
        public bool Hot { get; set; }
    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
  };

    public async Task OnChange(QueryModel<WeatherForecast> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new WeatherForecast
                {
                    Id = index,
                    Date = DateTime.Now.AddDays(index),
                    TemperatureC = temperatureC,
                    Summary = Summaries[rng.Next(Summaries.Length)],
                    Hot = temperatureC > 30,
                };
        }).ToArray());
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private void Delete(int id)
    {
        forecasts = forecasts.Where(x => x.Id != id).ToArray();
        _total = forecasts.Length;
    }
}


@code {
    string Employeename;
    string departmentname;

    List<Person> persons;

    class Person
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    protected override void OnInitialized()
    {
        persons = new List<Person>
        {
            new Person { Value = "", Name = "" },
            new Person { Value = "keitibu", Name = "経理部" },
            new Person { Value = "soumu.jinjibu", Name = "営業部" },
            new Person { Value = "sisutemu", Name = "システム室" }
        };
    }
}